#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–±–æ—Ä–∫–∏
const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, ext) {
  let results = [];
  const list = fs.readdirSync(dir);
  
  list.forEach(file => {
    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);
    
    if (stat && stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules
      if (file !== 'node_modules' && file !== 'dist' && file !== 'build') {
        results = results.concat(findFiles(fullPath, ext));
      }
    } else if (file.endsWith(ext)) {
      results.push(fullPath);
    }
  });
  
  return results;
}

// –ù–∞–π—Ç–∏ –≤—Å–µ .tsx —Ñ–∞–π–ª—ã
const tsxFiles = findFiles('.', '.tsx');

let fixedFiles = 0;

tsxFiles.forEach(filePath => {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
    const versionedImportRegex = /@([^\/\s]+)@[\d\.]+/g;
    const newContent = content.replace(versionedImportRegex, '@$1');
    
    if (newContent !== content) {
      fs.writeFileSync(filePath, newContent, 'utf8');
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
      fixedFiles++;
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ${filePath}: ${error.message}`);
  }
});

console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
console.log('‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Å–±–æ—Ä–∫–µ!');